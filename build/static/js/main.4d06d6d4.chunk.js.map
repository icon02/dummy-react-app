{"version":3,"sources":["https-common.js","App.js","reportWebVitals.js","index.js"],"names":["https","axios","create","baseURL","httpsAgent","iHttps","Agent","rejectUnauthorized","App","useState","isLoading","setLoading","text","setText","className","AppBar","position","Toolbar","to","path","exact","Button","onClick","get","then","res","data","value","variant","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAUeA,EAPDC,IAAMC,OAAO,CACvBC,QAAS,kCACTC,WAAY,IAAIC,IAAOC,MAAM,CACzBC,oBAAoB,M,OC4CbC,MA5Cf,WACE,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAWA,OACE,sBAAKC,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAAC,IAAD,CAAMC,GAAG,QAAT,kBAGA,cAAC,IAAD,CAAMA,GAAG,SAAT,wBAKJ,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,KAAK,QAAQC,OAAK,EAAzB,uCAEE,4BACE,cAACC,EAAA,EAAD,CAAQC,QAzBlB,WACEX,GAAW,GACXX,EAAMuB,IAAI,SACTC,MAAK,SAACC,GACLZ,EAAQY,EAAIC,KAAKC,OACjBhB,GAAW,OAoB4BiB,QAAQ,WAAzC,4BAEF,kDAAqBlB,EAAY,YAAcE,QAEjD,cAAC,IAAD,CAAOO,KAAK,SAASC,OAAK,EAA1B,yCAGA,cAAC,IAAD,CAAOD,KAAK,IAAIC,OAAK,EAArB,SACE,cAAC,IAAD,CAAUF,GAAG,mBC/BRW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.4d06d6d4.chunk.js","sourcesContent":["import axios from \"axios\";\nimport iHttps from \"https\";\n\nconst https = axios.create({\n    baseURL: \"http://secure.vollicon.com:8080\",\n    httpsAgent: new iHttps.Agent({\n        rejectUnauthorized: false,\n    })\n});\n\nexport default https;","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Button, Toolbar } from \"@material-ui/core\";\nimport { Switch as RouteSwitch, Route, Link, Redirect } from \"react-router-dom\";\nimport https from \"./https-common\";\n\nfunction App() {\n  const [isLoading, setLoading] = useState(false);\n  const [text, setText] = useState(\"\");\n\n  function setNetworkData() {\n    setLoading(true);\n    https.get(\"/test\")\n    .then((res) => {\n      setText(res.data.value);\n      setLoading(false);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Link to=\"/home\">\n            Home\n          </Link>\n          <Link to=\"/about\">\n            About\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <RouteSwitch>\n        <Route path=\"/home\" exact>\n          This is the home component\n          <p>\n            <Button onClick={setNetworkData} variant=\"outlined\">Request Data</Button>\n          </p>\n          <p>Data comes here: {isLoading ? \"Loading..\" : text}</p>\n        </Route>\n        <Route path=\"/about\" exact>\n          this is the about component\n        </Route>\n        <Route path=\"/\" exact>\n          <Redirect to=\"/home\" />\n        </Route>\n      </RouteSwitch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}